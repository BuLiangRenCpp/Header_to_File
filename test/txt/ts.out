[D:\code\git\Header_to_File\test\txt\pre.i]
#31:0: keyword: typedef
#31:8: identifier: interface
#31:18: identifier: IAsyncInfo
#31:29: identifier: IAsyncInfo
#31:40: schar: ;
#33:0: keyword: namespace
#33:10: identifier: ABI
#33:15: schar: {
#34:4: identifier: interface
#34:14: identifier: IAsyncInfo
#34:25: schar: ;
#35:1: schar: }
#44:0: keyword: extern
#44:7: string_literal: ""
#44:11: schar: {
#47:0: keyword: typedef
#47:8: keyword: enum
#47:13: identifier: AsyncStatus
#47:26: schar: {
#48:4: identifier: Started
#48:13: schar: =
#48:14: constant: 0
#48:16: schar: ,
#49:4: identifier: Completed
#49:15: schar: =
#49:16: constant: 1
#49:18: schar: ,
#50:4: identifier: Canceled
#50:14: schar: =
#50:15: constant: 2
#50:17: schar: ,
#51:4: identifier: Error
#51:11: schar: =
#51:12: constant: 3
#52:1: schar: }
#52:2: identifier: AsyncStatus
#52:14: schar: ;
#59:0: identifier: DEFINE_GUID
#59:12: schar: (
#59:12: identifier: IID_IAsyncInfo
#59:27: schar: ,
#59:28: constant: 0x00000036
#59:39: schar: ,
#59:40: constant: 0x0000
#59:47: schar: ,
#59:48: constant: 0x0000
#59:55: schar: ,
#59:56: constant: 0xc0
#59:61: schar: ,
#59:61: constant: 0x00
#59:66: schar: ,
#59:67: constant: 0x00
#59:72: schar: ,
#59:72: constant: 0x00
#59:77: schar: ,
#59:77: constant: 0x00
#59:82: schar: ,
#59:82: constant: 0x00
#59:87: schar: ,
#59:87: constant: 0x00
#59:92: schar: ,
#59:92: constant: 0x46
#59:97: schar: )
#59:98: schar: ;
#61:0: identifier: MIDL_INTERFACE
#61:15: schar: (
#61:15: string_literal: ""
#61:18: schar: )
#62:0: identifier: IAsyncInfo
#62:11: schar: 
#62:12: keyword: public
#62:19: identifier: IInspectable
#63:1: schar: {
#64:4: keyword: virtual
#64:12: identifier: HRESULT
#64:20: identifier: STDMETHODCALLTYPE
#64:38: identifier: get_Id
#64:45: schar: (
#65:9: identifier: INT32UINT32
#65:16: schar: *
#65:16: identifier: id
#65:19: schar: )
#65:21: schar: =
#65:22: constant: 0
#65:24: schar: ;
#67:4: keyword: virtual
#67:12: identifier: HRESULT
#67:20: identifier: STDMETHODCALLTYPE
#67:38: identifier: get_Status
#67:49: schar: (
#68:8: identifier: AsyncStatus
#68:21: schar: *
#68:21: identifier: status
#68:28: schar: )
#68:30: schar: =
#68:31: constant: 0
#68:33: schar: ;
#70:4: keyword: virtual
#70:12: identifier: HRESULT
#70:20: identifier: STDMETHODCALLTYPE
#70:38: identifier: get_ErrorCode
#70:52: schar: (
#71:8: identifier: HRESULT
#71:17: schar: *
#71:17: identifier: error_code
#71:28: schar: )
#71:30: schar: =
#71:31: constant: 0
#71:33: schar: ;
#73:4: keyword: virtual
#73:12: identifier: HRESULT
#73:20: identifier: STDMETHODCALLTYPE
#73:38: identifier: Cancel
#73:45: schar: (
#74:9: schar: )
#74:11: schar: =
#74:12: constant: 0
#74:14: schar: ;
#76:4: keyword: virtual
#76:12: identifier: HRESULT
#76:20: identifier: STDMETHODCALLTYPE
#76:38: identifier: Close
#76:44: schar: (
#77:9: schar: )
#77:11: schar: =
#77:12: constant: 0
#77:14: schar: ;
#79:1: schar: }
#79:2: schar: ;
#81:0: identifier: __CRT_UUID_DECL
#81:16: schar: (
#81:16: identifier: IAsyncInfo
#81:27: schar: ,
#81:28: constant: 0x00000036
#81:39: schar: ,
#81:40: constant: 0x0000
#81:47: schar: ,
#81:48: constant: 0x0000
#81:55: schar: ,
#81:56: constant: 0xc0
#81:61: schar: ,
#81:61: constant: 0x00
#81:66: schar: ,
#81:67: constant: 0x00
#81:72: schar: ,
#81:72: constant: 0x00
#81:77: schar: ,
#81:77: constant: 0x00
#81:82: schar: ,
#81:82: constant: 0x00
#81:87: schar: ,
#81:87: constant: 0x00
#81:92: schar: ,
#81:92: constant: 0x46
#81:97: schar: )
#84:0: keyword: typedef
#84:8: keyword: struct
#84:15: identifier: IAsyncInfoVtbl
#84:31: schar: {
#85:4: identifier: BEGIN_INTERFACE
#88:4: identifier: HRESULT
#88:13: schar: (
#88:13: identifier: STDMETHODCALLTYPE
#88:32: schar: *
#88:32: identifier: QueryInterface
#88:47: schar: )
#88:48: schar: (
#89:8: identifier: IAsyncInfo
#89:20: schar: *
#89:20: identifier: This
#89:25: schar: ,
#90:8: identifier: REFIID
#90:15: identifier: riid
#90:20: schar: ,
#91:8: keyword: void
#91:14: schar: *
#91:15: schar: *
#91:15: identifier: ppvObject
#91:25: schar: )
#91:26: schar: ;
#93:5: identifier: LONGULONG
#93:11: schar: (
#93:11: identifier: STDMETHODCALLTYPE
#93:30: schar: *
#93:30: identifier: AddRef
#93:37: schar: )
#93:38: schar: (
#94:8: identifier: IAsyncInfo
#94:20: schar: *
#94:20: identifier: This
#94:25: schar: )
#94:26: schar: ;
#96:5: identifier: LONGULONG
#96:11: schar: (
#96:11: identifier: STDMETHODCALLTYPE
#96:30: schar: *
#96:30: identifier: Release
#96:38: schar: )
#96:39: schar: (
#97:8: identifier: IAsyncInfo
#97:20: schar: *
#97:20: identifier: This
#97:25: schar: )
#97:26: schar: ;
#100:4: identifier: HRESULT
#100:13: schar: (
#100:13: identifier: STDMETHODCALLTYPE
#100:32: schar: *
#100:32: identifier: GetIids
#100:40: schar: )
#100:41: schar: (
#101:8: identifier: IAsyncInfo
#101:20: schar: *
#101:20: identifier: This
#101:25: schar: ,
#102:9: identifier: LONGULONG
#102:15: schar: *
#102:15: identifier: iidCount
#102:24: schar: ,
#103:8: identifier: IID
#103:13: schar: *
#103:14: schar: *
#103:14: identifier: iids
#103:19: schar: )
#103:20: schar: ;
#105:4: identifier: HRESULT
#105:13: schar: (
#105:13: identifier: STDMETHODCALLTYPE
#105:32: schar: *
#105:32: identifier: GetRuntimeClassName
#105:52: schar: )
#105:53: schar: (
#106:8: identifier: IAsyncInfo
#106:20: schar: *
#106:20: identifier: This
#106:25: schar: ,
#107:8: identifier: HSTRING
#107:17: schar: *
#107:17: identifier: className
#107:27: schar: )
#107:28: schar: ;
#109:4: identifier: HRESULT
#109:13: schar: (
#109:13: identifier: STDMETHODCALLTYPE
#109:32: schar: *
#109:32: identifier: GetTrustLevel
#109:46: schar: )
#109:47: schar: (
#110:8: identifier: IAsyncInfo
#110:20: schar: *
#110:20: identifier: This
#110:25: schar: ,
#111:8: identifier: TrustLevel
#111:20: schar: *
#111:20: identifier: trustLevel
#111:31: schar: )
#111:32: schar: ;
#114:4: identifier: HRESULT
#114:13: schar: (
#114:13: identifier: STDMETHODCALLTYPE
#114:32: schar: *
#114:32: identifier: get_Id
#114:39: schar: )
#114:40: schar: (
#115:8: identifier: IAsyncInfo
#115:20: schar: *
#115:20: identifier: This
#115:25: schar: ,
#116:9: identifier: INT32UINT32
#116:16: schar: *
#116:16: identifier: id
#116:19: schar: )
#116:20: schar: ;
#118:4: identifier: HRESULT
#118:13: schar: (
#118:13: identifier: STDMETHODCALLTYPE
#118:32: schar: *
#118:32: identifier: get_Status
#118:43: schar: )
#118:44: schar: (
#119:8: identifier: IAsyncInfo
#119:20: schar: *
#119:20: identifier: This
#119:25: schar: ,
#120:8: identifier: AsyncStatus
#120:21: schar: *
#120:21: identifier: status
#120:28: schar: )
#120:29: schar: ;
#122:4: identifier: HRESULT
#122:13: schar: (
#122:13: identifier: STDMETHODCALLTYPE
#122:32: schar: *
#122:32: identifier: get_ErrorCode
#122:46: schar: )
#122:47: schar: (
#123:8: identifier: IAsyncInfo
#123:20: schar: *
#123:20: identifier: This
#123:25: schar: ,
#124:8: identifier: HRESULT
#124:17: schar: *
#124:17: identifier: error_code
#124:28: schar: )
#124:29: schar: ;
#126:4: identifier: HRESULT
#126:13: schar: (
#126:13: identifier: STDMETHODCALLTYPE
#126:32: schar: *
#126:32: identifier: Cancel
#126:39: schar: )
#126:40: schar: (
#127:8: identifier: IAsyncInfo
#127:20: schar: *
#127:20: identifier: This
#127:25: schar: )
#127:26: schar: ;
#129:4: identifier: HRESULT
#129:13: schar: (
#129:13: identifier: STDMETHODCALLTYPE
#129:32: schar: *
#129:32: identifier: Close
#129:38: schar: )
#129:39: schar: (
#130:8: identifier: IAsyncInfo
#130:20: schar: *
#130:20: identifier: This
#130:25: schar: )
#130:26: schar: ;
#132:4: identifier: END_INTERFACE
#133:1: schar: }
#133:2: identifier: IAsyncInfoVtbl
#133:17: schar: ;
#135:0: identifier: interface
#135:10: identifier: IAsyncInfo
#135:22: schar: {
#136:4: identifier: CONST_VTBL
#136:15: identifier: IAsyncInfoVtbl
#136:30: schar: *
#136:31: identifier: lpVtbl
#136:38: schar: ;
#137:1: schar: }
#137:2: schar: ;
#157:0: keyword: static
#157:7: identifier: __WIDL_INLINE
#157:21: identifier: HRESULT
#157:29: identifier: IAsyncInfo_QueryInterface
#157:55: schar: (
#157:55: identifier: IAsyncInfo
#157:66: schar: *
#157:67: identifier: This
#157:72: schar: ,
#157:72: identifier: REFIID
#157:79: identifier: riid
#157:84: schar: ,
#157:84: keyword: void
#157:90: schar: *
#157:91: schar: *
#157:91: identifier: ppvObject
#157:101: schar: )
#157:103: schar: {
#158:4: identifier: return
#158:11: identifier: This
#158:15: dchar: ->
#158:17: identifier: lpVtbl
#158:23: dchar: ->
#158:25: identifier: QueryInterface
#158:40: schar: (
#158:40: identifier: This
#158:45: schar: ,
#158:45: identifier: riid
#158:50: schar: ,
#158:50: identifier: ppvObject
#158:60: schar: )
#158:61: schar: ;
#159:1: schar: }
#160:0: keyword: static
#160:7: identifier: __WIDL_INLINE
#160:22: identifier: LONGULONG
#160:27: identifier: IAsyncInfo_AddRef
#160:45: schar: (
#160:45: identifier: IAsyncInfo
#160:56: schar: *
#160:57: identifier: This
#160:62: schar: )
#160:64: schar: {
#161:4: identifier: return
#161:11: identifier: This
#161:15: dchar: ->
#161:17: identifier: lpVtbl
#161:23: dchar: ->
#161:25: identifier: AddRef
#161:32: schar: (
#161:32: identifier: This
#161:37: schar: )
#161:38: schar: ;
#162:1: schar: }
#163:0: keyword: static
#163:7: identifier: __WIDL_INLINE
#163:22: identifier: LONGULONG
#163:27: identifier: IAsyncInfo_Release
#163:46: schar: (
#163:46: identifier: IAsyncInfo
#163:57: schar: *
#163:58: identifier: This
#163:63: schar: )
#163:65: schar: {
#164:4: identifier: return
#164:11: identifier: This
#164:15: dchar: ->
#164:17: identifier: lpVtbl
#164:23: dchar: ->
#164:25: identifier: Release
#164:33: schar: (
#164:33: identifier: This
#164:38: schar: )
#164:39: schar: ;
#165:1: schar: }
#167:0: keyword: static
#167:7: identifier: __WIDL_INLINE
#167:21: identifier: HRESULT
#167:29: identifier: IAsyncInfo_GetIids
#167:48: schar: (
#167:48: identifier: IAsyncInfo
#167:59: schar: *
#167:60: identifier: This
#167:65: schar: ,
#167:66: identifier: LONGULONG
#167:72: schar: *
#167:72: identifier: iidCount
#167:81: schar: ,
#167:81: identifier: IID
#167:86: schar: *
#167:87: schar: *
#167:87: identifier: iids
#167:92: schar: )
#167:94: schar: {
#168:4: identifier: return
#168:11: identifier: This
#168:15: dchar: ->
#168:17: identifier: lpVtbl
#168:23: dchar: ->
#168:25: identifier: GetIids
#168:33: schar: (
#168:33: identifier: This
#168:38: schar: ,
#168:38: identifier: iidCount
#168:47: schar: ,
#168:47: identifier: iids
#168:52: schar: )
#168:53: schar: ;
#169:1: schar: }
#170:0: keyword: static
#170:7: identifier: __WIDL_INLINE
#170:21: identifier: HRESULT
#170:29: identifier: IAsyncInfo_GetRuntimeClassName
#170:60: schar: (
#170:60: identifier: IAsyncInfo
#170:71: schar: *
#170:72: identifier: This
#170:77: schar: ,
#170:77: identifier: HSTRING
#170:86: schar: *
#170:86: identifier: className
#170:96: schar: )
#170:98: schar: {
#171:4: identifier: return
#171:11: identifier: This
#171:15: dchar: ->
#171:17: identifier: lpVtbl
#171:23: dchar: ->
#171:25: identifier: GetRuntimeClassName
#171:45: schar: (
#171:45: identifier: This
#171:50: schar: ,
#171:50: identifier: className
#171:60: schar: )
#171:61: schar: ;
#172:1: schar: }
#173:0: keyword: static
#173:7: identifier: __WIDL_INLINE
#173:21: identifier: HRESULT
#173:29: identifier: IAsyncInfo_GetTrustLevel
#173:54: schar: (
#173:54: identifier: IAsyncInfo
#173:65: schar: *
#173:66: identifier: This
#173:71: schar: ,
#173:71: identifier: TrustLevel
#173:83: schar: *
#173:83: identifier: trustLevel
#173:94: schar: )
#173:96: schar: {
#174:4: identifier: return
#174:11: identifier: This
#174:15: dchar: ->
#174:17: identifier: lpVtbl
#174:23: dchar: ->
#174:25: identifier: GetTrustLevel
#174:39: schar: (
#174:39: identifier: This
#174:44: schar: ,
#174:44: identifier: trustLevel
#174:55: schar: )
#174:56: schar: ;
#175:1: schar: }
#177:0: keyword: static
#177:7: identifier: __WIDL_INLINE
#177:21: identifier: HRESULT
#177:29: identifier: IAsyncInfo_get_Id
#177:47: schar: (
#177:47: identifier: IAsyncInfo
#177:58: schar: *
#177:59: identifier: This
#177:64: schar: ,
#177:65: identifier: INT32UINT32
#177:72: schar: *
#177:72: identifier: id
#177:75: schar: )
#177:77: schar: {
#178:4: identifier: return
#178:11: identifier: This
#178:15: dchar: ->
#178:17: identifier: lpVtbl
#178:23: dchar: ->
#178:25: identifier: get_Id
#178:32: schar: (
#178:32: identifier: This
#178:37: schar: ,
#178:37: identifier: id
#178:40: schar: )
#178:41: schar: ;
#179:1: schar: }
#180:0: keyword: static
#180:7: identifier: __WIDL_INLINE
#180:21: identifier: HRESULT
#180:29: identifier: IAsyncInfo_get_Status
#180:51: schar: (
#180:51: identifier: IAsyncInfo
#180:62: schar: *
#180:63: identifier: This
#180:68: schar: ,
#180:68: identifier: AsyncStatus
#180:81: schar: *
#180:81: identifier: status
#180:88: schar: )
#180:90: schar: {
#181:4: identifier: return
#181:11: identifier: This
#181:15: dchar: ->
#181:17: identifier: lpVtbl
#181:23: dchar: ->
#181:25: identifier: get_Status
#181:36: schar: (
#181:36: identifier: This
#181:41: schar: ,
#181:41: identifier: status
#181:48: schar: )
#181:49: schar: ;
#182:1: schar: }
#183:0: keyword: static
#183:7: identifier: __WIDL_INLINE
#183:21: identifier: HRESULT
#183:29: identifier: IAsyncInfo_get_ErrorCode
#183:54: schar: (
#183:54: identifier: IAsyncInfo
#183:65: schar: *
#183:66: identifier: This
#183:71: schar: ,
#183:71: identifier: HRESULT
#183:80: schar: *
#183:80: identifier: error_code
#183:91: schar: )
#183:93: schar: {
#184:4: identifier: return
#184:11: identifier: This
#184:15: dchar: ->
#184:17: identifier: lpVtbl
#184:23: dchar: ->
#184:25: identifier: get_ErrorCode
#184:39: schar: (
#184:39: identifier: This
#184:44: schar: ,
#184:44: identifier: error_code
#184:55: schar: )
#184:56: schar: ;
#185:1: schar: }
#186:0: keyword: static
#186:7: identifier: __WIDL_INLINE
#186:21: identifier: HRESULT
#186:29: identifier: IAsyncInfo_Cancel
#186:47: schar: (
#186:47: identifier: IAsyncInfo
#186:58: schar: *
#186:59: identifier: This
#186:64: schar: )
#186:66: schar: {
#187:4: identifier: return
#187:11: identifier: This
#187:15: dchar: ->
#187:17: identifier: lpVtbl
#187:23: dchar: ->
#187:25: identifier: Cancel
#187:32: schar: (
#187:32: identifier: This
#187:37: schar: )
#187:38: schar: ;
#188:1: schar: }
#189:0: keyword: static
#189:7: identifier: __WIDL_INLINE
#189:21: identifier: HRESULT
#189:29: identifier: IAsyncInfo_Close
#189:46: schar: (
#189:46: identifier: IAsyncInfo
#189:57: schar: *
#189:58: identifier: This
#189:63: schar: )
#189:65: schar: {
#190:4: identifier: return
#190:11: identifier: This
#190:15: dchar: ->
#190:17: identifier: lpVtbl
#190:23: dchar: ->
#190:25: identifier: Close
#190:31: schar: (
#190:31: identifier: This
#190:36: schar: )
#190:37: schar: ;
#191:1: schar: }
#205:1: schar: }
